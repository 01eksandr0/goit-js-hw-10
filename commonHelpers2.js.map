{"version":3,"file":"commonHelpers2.js","sources":["../src/js/task1.js"],"sourcesContent":["// function\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n// ===============================================\nfunction padStartedNumber(n) {\n  return `${n}`.padStart(2, 0);\n}\n\n// ===============================================\n\nconst btnStartEl = document.querySelector('[data-start]');\nconst dataDays = document.querySelector('[data-days]');\nconst dataHours = document.querySelector('[data-hours]');\nconst dataMinutes = document.querySelector('[data-minutes]');\nconst dataSeconds = document.querySelector('[data-seconds]');\nconst timerEl = document.querySelector('#datetime-picker');\n\nconst timerSeting = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0].getTime() < new Date().getTime()) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n        backgroundColor: 'red',\n        messageColor: '#fff',\n      });\n    } else {\n      btnStartEl.classList.toggle('btn-inactive');\n      btnStartEl.addEventListener('click', () => {\n        const myInterval = setInterval(() => {\n          const time = convertMs(\n            selectedDates[0].getTime() - new Date().getTime()\n          );\n          dataDays.textContent = padStartedNumber(time.days);\n          dataHours.textContent = padStartedNumber(time.hours);\n          dataMinutes.textContent = padStartedNumber(time.minutes);\n          dataSeconds.textContent = padStartedNumber(time.seconds);\n          if (\n            dataDays.textContent === '00' &&\n            dataHours.textContent === '00' &&\n            dataMinutes.textContent === '00' &&\n            dataSeconds.textContent === '00'\n          ) {\n            clearInterval(myInterval);\n          }\n        }, 1000);\n        btnStartEl.classList.toggle('btn-inactive');\n        timerEl.classList.toggle('btn-inactive');\n      });\n    }\n  },\n};\nconst timer = flatpickr('#datetime-picker', timerSeting);\n"],"names":["convertMs","ms","days","hours","minutes","seconds","padStartedNumber","n","btnStartEl","dataDays","dataHours","dataMinutes","dataSeconds","timerEl","timerSeting","selectedDates","myInterval","time"],"mappings":"8EACA,SAASA,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAG1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAiBC,EAAG,CAC3B,MAAO,GAAGA,IAAI,SAAS,EAAG,CAAC,CAC7B,CAIA,MAAMC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAU,SAAS,cAAc,kBAAkB,EAEnDC,EAAc,CAClB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,GAAG,QAAS,EAAG,IAAI,KAAI,EAAG,UAC1C,SAAS,MAAM,CACb,QAAS,qCACT,SAAU,YACV,gBAAiB,MACjB,aAAc,MACtB,CAAO,GAEDP,EAAW,UAAU,OAAO,cAAc,EAC1CA,EAAW,iBAAiB,QAAS,IAAM,CACzC,MAAMQ,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAOjB,EACXe,EAAc,GAAG,QAAS,EAAG,IAAI,KAAM,EAAC,QAAS,CAC7D,EACUN,EAAS,YAAcH,EAAiBW,EAAK,IAAI,EACjDP,EAAU,YAAcJ,EAAiBW,EAAK,KAAK,EACnDN,EAAY,YAAcL,EAAiBW,EAAK,OAAO,EACvDL,EAAY,YAAcN,EAAiBW,EAAK,OAAO,EAErDR,EAAS,cAAgB,MACzBC,EAAU,cAAgB,MAC1BC,EAAY,cAAgB,MAC5BC,EAAY,cAAgB,MAE5B,cAAcI,CAAU,CAE3B,EAAE,GAAI,EACPR,EAAW,UAAU,OAAO,cAAc,EAC1CK,EAAQ,UAAU,OAAO,cAAc,CAC/C,CAAO,EAEJ,CACH,EACc,UAAU,mBAAoBC,CAAW"}